package object

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i github.com/insolar/insolar/ledger/object.RecordPositionModifier -o ./record_position_modifier_mock.go

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock"
	"github.com/insolar/insolar/insolar"
)

// RecordPositionModifierMock implements RecordPositionModifier
type RecordPositionModifierMock struct {
	t minimock.Tester

	funcIncrementPosition          func(recID insolar.ID) (err error)
	inspectFuncIncrementPosition   func(recID insolar.ID)
	afterIncrementPositionCounter  uint64
	beforeIncrementPositionCounter uint64
	IncrementPositionMock          mRecordPositionModifierMockIncrementPosition
}

// NewRecordPositionModifierMock returns a mock for RecordPositionModifier
func NewRecordPositionModifierMock(t minimock.Tester) *RecordPositionModifierMock {
	m := &RecordPositionModifierMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.IncrementPositionMock = mRecordPositionModifierMockIncrementPosition{mock: m}
	m.IncrementPositionMock.callArgs = []*RecordPositionModifierMockIncrementPositionParams{}

	return m
}

type mRecordPositionModifierMockIncrementPosition struct {
	mock               *RecordPositionModifierMock
	defaultExpectation *RecordPositionModifierMockIncrementPositionExpectation
	expectations       []*RecordPositionModifierMockIncrementPositionExpectation

	callArgs []*RecordPositionModifierMockIncrementPositionParams
	mutex    sync.RWMutex
}

// RecordPositionModifierMockIncrementPositionExpectation specifies expectation struct of the RecordPositionModifier.IncrementPosition
type RecordPositionModifierMockIncrementPositionExpectation struct {
	mock    *RecordPositionModifierMock
	params  *RecordPositionModifierMockIncrementPositionParams
	results *RecordPositionModifierMockIncrementPositionResults
	Counter uint64
}

// RecordPositionModifierMockIncrementPositionParams contains parameters of the RecordPositionModifier.IncrementPosition
type RecordPositionModifierMockIncrementPositionParams struct {
	recID insolar.ID
}

// RecordPositionModifierMockIncrementPositionResults contains results of the RecordPositionModifier.IncrementPosition
type RecordPositionModifierMockIncrementPositionResults struct {
	err error
}

// Expect sets up expected params for RecordPositionModifier.IncrementPosition
func (mmIncrementPosition *mRecordPositionModifierMockIncrementPosition) Expect(recID insolar.ID) *mRecordPositionModifierMockIncrementPosition {
	if mmIncrementPosition.mock.funcIncrementPosition != nil {
		mmIncrementPosition.mock.t.Fatalf("RecordPositionModifierMock.IncrementPosition mock is already set by Set")
	}

	if mmIncrementPosition.defaultExpectation == nil {
		mmIncrementPosition.defaultExpectation = &RecordPositionModifierMockIncrementPositionExpectation{}
	}

	mmIncrementPosition.defaultExpectation.params = &RecordPositionModifierMockIncrementPositionParams{recID}
	for _, e := range mmIncrementPosition.expectations {
		if minimock.Equal(e.params, mmIncrementPosition.defaultExpectation.params) {
			mmIncrementPosition.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmIncrementPosition.defaultExpectation.params)
		}
	}

	return mmIncrementPosition
}

// Inspect accepts an inspector function that has same arguments as the RecordPositionModifier.IncrementPosition
func (mmIncrementPosition *mRecordPositionModifierMockIncrementPosition) Inspect(f func(recID insolar.ID)) *mRecordPositionModifierMockIncrementPosition {
	if mmIncrementPosition.mock.inspectFuncIncrementPosition != nil {
		mmIncrementPosition.mock.t.Fatalf("Inspect function is already set for RecordPositionModifierMock.IncrementPosition")
	}

	mmIncrementPosition.mock.inspectFuncIncrementPosition = f

	return mmIncrementPosition
}

// Return sets up results that will be returned by RecordPositionModifier.IncrementPosition
func (mmIncrementPosition *mRecordPositionModifierMockIncrementPosition) Return(err error) *RecordPositionModifierMock {
	if mmIncrementPosition.mock.funcIncrementPosition != nil {
		mmIncrementPosition.mock.t.Fatalf("RecordPositionModifierMock.IncrementPosition mock is already set by Set")
	}

	if mmIncrementPosition.defaultExpectation == nil {
		mmIncrementPosition.defaultExpectation = &RecordPositionModifierMockIncrementPositionExpectation{mock: mmIncrementPosition.mock}
	}
	mmIncrementPosition.defaultExpectation.results = &RecordPositionModifierMockIncrementPositionResults{err}
	return mmIncrementPosition.mock
}

//Set uses given function f to mock the RecordPositionModifier.IncrementPosition method
func (mmIncrementPosition *mRecordPositionModifierMockIncrementPosition) Set(f func(recID insolar.ID) (err error)) *RecordPositionModifierMock {
	if mmIncrementPosition.defaultExpectation != nil {
		mmIncrementPosition.mock.t.Fatalf("Default expectation is already set for the RecordPositionModifier.IncrementPosition method")
	}

	if len(mmIncrementPosition.expectations) > 0 {
		mmIncrementPosition.mock.t.Fatalf("Some expectations are already set for the RecordPositionModifier.IncrementPosition method")
	}

	mmIncrementPosition.mock.funcIncrementPosition = f
	return mmIncrementPosition.mock
}

// When sets expectation for the RecordPositionModifier.IncrementPosition which will trigger the result defined by the following
// Then helper
func (mmIncrementPosition *mRecordPositionModifierMockIncrementPosition) When(recID insolar.ID) *RecordPositionModifierMockIncrementPositionExpectation {
	if mmIncrementPosition.mock.funcIncrementPosition != nil {
		mmIncrementPosition.mock.t.Fatalf("RecordPositionModifierMock.IncrementPosition mock is already set by Set")
	}

	expectation := &RecordPositionModifierMockIncrementPositionExpectation{
		mock:   mmIncrementPosition.mock,
		params: &RecordPositionModifierMockIncrementPositionParams{recID},
	}
	mmIncrementPosition.expectations = append(mmIncrementPosition.expectations, expectation)
	return expectation
}

// Then sets up RecordPositionModifier.IncrementPosition return parameters for the expectation previously defined by the When method
func (e *RecordPositionModifierMockIncrementPositionExpectation) Then(err error) *RecordPositionModifierMock {
	e.results = &RecordPositionModifierMockIncrementPositionResults{err}
	return e.mock
}

// IncrementPosition implements RecordPositionModifier
func (mmIncrementPosition *RecordPositionModifierMock) IncrementPosition(recID insolar.ID) (err error) {
	mm_atomic.AddUint64(&mmIncrementPosition.beforeIncrementPositionCounter, 1)
	defer mm_atomic.AddUint64(&mmIncrementPosition.afterIncrementPositionCounter, 1)

	if mmIncrementPosition.inspectFuncIncrementPosition != nil {
		mmIncrementPosition.inspectFuncIncrementPosition(recID)
	}

	params := &RecordPositionModifierMockIncrementPositionParams{recID}

	// Record call args
	mmIncrementPosition.IncrementPositionMock.mutex.Lock()
	mmIncrementPosition.IncrementPositionMock.callArgs = append(mmIncrementPosition.IncrementPositionMock.callArgs, params)
	mmIncrementPosition.IncrementPositionMock.mutex.Unlock()

	for _, e := range mmIncrementPosition.IncrementPositionMock.expectations {
		if minimock.Equal(e.params, params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmIncrementPosition.IncrementPositionMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmIncrementPosition.IncrementPositionMock.defaultExpectation.Counter, 1)
		want := mmIncrementPosition.IncrementPositionMock.defaultExpectation.params
		got := RecordPositionModifierMockIncrementPositionParams{recID}
		if want != nil && !minimock.Equal(*want, got) {
			mmIncrementPosition.t.Errorf("RecordPositionModifierMock.IncrementPosition got unexpected parameters, want: %#v, got: %#v%s\n", *want, got, minimock.Diff(*want, got))
		}

		results := mmIncrementPosition.IncrementPositionMock.defaultExpectation.results
		if results == nil {
			mmIncrementPosition.t.Fatal("No results are set for the RecordPositionModifierMock.IncrementPosition")
		}
		return (*results).err
	}
	if mmIncrementPosition.funcIncrementPosition != nil {
		return mmIncrementPosition.funcIncrementPosition(recID)
	}
	mmIncrementPosition.t.Fatalf("Unexpected call to RecordPositionModifierMock.IncrementPosition. %v", recID)
	return
}

// IncrementPositionAfterCounter returns a count of finished RecordPositionModifierMock.IncrementPosition invocations
func (mmIncrementPosition *RecordPositionModifierMock) IncrementPositionAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmIncrementPosition.afterIncrementPositionCounter)
}

// IncrementPositionBeforeCounter returns a count of RecordPositionModifierMock.IncrementPosition invocations
func (mmIncrementPosition *RecordPositionModifierMock) IncrementPositionBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmIncrementPosition.beforeIncrementPositionCounter)
}

// Calls returns a list of arguments used in each call to RecordPositionModifierMock.IncrementPosition.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmIncrementPosition *mRecordPositionModifierMockIncrementPosition) Calls() []*RecordPositionModifierMockIncrementPositionParams {
	mmIncrementPosition.mutex.RLock()

	argCopy := make([]*RecordPositionModifierMockIncrementPositionParams, len(mmIncrementPosition.callArgs))
	copy(argCopy, mmIncrementPosition.callArgs)

	mmIncrementPosition.mutex.RUnlock()

	return argCopy
}

// MinimockIncrementPositionDone returns true if the count of the IncrementPosition invocations corresponds
// the number of defined expectations
func (m *RecordPositionModifierMock) MinimockIncrementPositionDone() bool {
	for _, e := range m.IncrementPositionMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.IncrementPositionMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterIncrementPositionCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcIncrementPosition != nil && mm_atomic.LoadUint64(&m.afterIncrementPositionCounter) < 1 {
		return false
	}
	return true
}

// MinimockIncrementPositionInspect logs each unmet expectation
func (m *RecordPositionModifierMock) MinimockIncrementPositionInspect() {
	for _, e := range m.IncrementPositionMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to RecordPositionModifierMock.IncrementPosition with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.IncrementPositionMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterIncrementPositionCounter) < 1 {
		if m.IncrementPositionMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to RecordPositionModifierMock.IncrementPosition")
		} else {
			m.t.Errorf("Expected call to RecordPositionModifierMock.IncrementPosition with params: %#v", *m.IncrementPositionMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcIncrementPosition != nil && mm_atomic.LoadUint64(&m.afterIncrementPositionCounter) < 1 {
		m.t.Error("Expected call to RecordPositionModifierMock.IncrementPosition")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *RecordPositionModifierMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockIncrementPositionInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *RecordPositionModifierMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *RecordPositionModifierMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockIncrementPositionDone()
}
